#!/usr/bin/env node

const fs = require( 'fs' );
const path = require( 'path' );
const Holidays = require( 'date-holidays' );
const AnsiToHtml = require( 'ansi-to-html' );
const htmlToSlackMrkdwn = require( 'html-to-mrkdwn' );

// You should not put a full 7.25 or 8 hours here. Instead leave some time for
// unexpected work, since there are always surprises during a workday.
const HOURS_PER_DAY = 6;
const TASK_NAME_MAX_LENGTH = 100;

// -----------------------------

let argv = process.argv.slice( 2 );

const outputHtml = argv.find( arg => arg === '--html' );
const outputSlackMrkdwn = argv.find( arg => arg === '--slack' );
const outputColors = outputHtml || outputSlackMrkdwn || argv.find( arg => arg === '--color' );

// Remove all options (e.g. -f and --foo)
for ( let i = argv.length - 1; i >= 0; i-- ) {
  if ( argv[ i ][ 0 ] === '-' ) {
    argv.splice( i, 1 );
  }
}

const todoFile = argv[ 0 ];

if ( !todoFile || !fs.existsSync( todoFile ) ) {
  console.error( 'Usage: ./todo todolistfile' );
  process.exit( 1 );
}

// -----------------------------

if ( outputHtml ) {
  console.log( `
    <style type="text/css">
      html,
      body {
        font-family: monospace;
      }
    </style>
  ` );
}

// -----------------------------

const holidays = new Holidays( 'FI' );
const ansiToHtml = new AnsiToHtml( {
  escapeXML: outputHtml
} );

const todoFileStr = fs.readFileSync( todoFile ).toString();

let todoList = [];

todoFileStr.split( /[\r\n]+/g ).forEach( line => {
  const matches = line.match( /^(.+)\s*\[\s*(\d+(\.\d+)?)\s*(h|hours?|htp|d|days?|weeks?)\s*\]/ );

  if ( matches && matches[ 1 ] && matches[ 2 ] ) {
    const task = matches[ 1 ].trim();
    const time = parseFloat( matches[ 2 ] );
    const timeIsDays = /^(htp|d|days?)$/.test( matches[ 4 ] );
    const timeIsWeeks = /^weeks?$/.test( matches[ 4 ] );
    let hours = time;

    if ( timeIsDays ) {
      hours = time * HOURS_PER_DAY;
    }
    else if ( timeIsWeeks ) {
      hours = time * HOURS_PER_DAY * 5;
    }

    todoList.push( {
      task: task,
      hours: hours,
    } );
  }
} );

// -----------------------------

function print( str ) {

  if ( outputHtml || outputSlackMrkdwn ) {
    str = ansiToHtml.toHtml( str ) +'<br>';
  }

  if ( outputSlackMrkdwn ) {
    str = ( htmlToSlackMrkdwn( str ).text || '' ).
      replace( /&gt;/, '>' ).
      replace( /&lt;/, '<' ).
      replace( /&amp;/, '&' );
  }

  console.log( str );
}

function printToday( appendStr ) {
  print( '' );
  print( ( outputColors ? '\x1b[1m' : '' ) + '# '+ today.getUTCFullYear() + '-' + ('00' + (today.getUTCMonth()+1)).slice(-2) + '-' + ('00' + today.getUTCDate()).slice(-2) + ( appendStr ? ': '+ appendStr : '' ) + ( outputColors ? '\x1b[0m' : '' ) );
}

function printTask( item, infoText = '' ) {

  let taskName = item.task;

  taskName = taskName.trim().replace( /^-\s*/, '- ' );

  if ( taskName.length > TASK_NAME_MAX_LENGTH ) {
    taskName = taskName.substr( 0, TASK_NAME_MAX_LENGTH ) +'...';
  }

  // Color certain keywords that contain deadline dates and other important info
  // that I want to find easily
  [
    'mennessä',
    'aikana',
    'ennen',
    'viimeistään',
    'before',
    'deadline',
    'by',
    'at latest',
    'at the latest',
    'not later',
    'asap',
    'as soon as possible',
    'soon',
    'valmis',
    'valmista',
    'done',
    'ready',
    '!',
  ].forEach( highlight => {
    taskName = taskName.replace( new RegExp( '([\\b\\s])'+ highlight +'(\\b|\\s|$)', 'ig' ), '$1'+ highlight.toLocaleUpperCase() +'$2' );
    taskName = taskName.replace( new RegExp( '('+ highlight +')', 'ig' ), ( outputColors ? '\x1b[1;31m' : '' ) + '$1' + ( outputColors ? '\x1b[0m' : '' ) );
  } );

  const days = ( item.hours / HOURS_PER_DAY ).toFixed( 1 ).replace( /\.0+$/, '' );

  print( taskName +' '+ ( outputColors ? '\x1b[1;33m' : '' ) +'['+ ( infoText ? infoText : days +' days' ) +']'+ ( outputColors ? '\x1b[0m' : '' ) );
}

function goToNextWorkday() {

  // Increment day by one
  // https://stackoverflow.com/questions/563406/add-days-to-javascript-date
  today.setDate( today.getDate() + 1 );

  let holiday = holidays.isHoliday( today );
  let printedHolidays = {};

  function printHoliday( name ) {
    if ( !printedHolidays[ name ] ) {
      printToday( '[Holiday: '+ name +']' );
      printedHolidays[ name ] = true;
    }
  }

  while ( today.getDay() === 6 || today.getDay() === 0 || holiday ) {
    if ( holiday ) {
      printHoliday( holiday.name );
    }

    today.setDate( today.getDate() + 1 );
    holiday = holidays.isHoliday( today );
  }
}

const totalHours = todoList.reduce( ( total, item ) => total + item.hours, 0 );

print( ( outputColors ? '\x1b[1m' : '' ) + '########### TODO list ('+ todoList.length + ' tasks: '+ totalHours +' hours, '+ ( totalHours / HOURS_PER_DAY ).toFixed( 0 ) +' days) ###########' + ( outputColors ? '\x1b[0m' : '' ) );
print( '' );

let today = new Date();
goToNextWorkday();
let hoursLeftToday = HOURS_PER_DAY;

todoList.forEach( item => {

  hoursLeftToday -= item.hours;

  // This task can be finished today
  if ( hoursLeftToday >= 0 ) {
    printTask( item );
  }
  // This task will be finished tomorrow at the earliest
  else {
    // Don't print the start time of very short tasks. It just clutters
    // the output. We're mainly interested in splitting a task into a start
    // and an end when the task is very long.
    if ( item.hours >= HOURS_PER_DAY ) {
      printTask( item );
    }

    while ( hoursLeftToday < 0 ) {
      goToNextWorkday();
      hoursLeftToday += HOURS_PER_DAY;
    }

    printToday();

    if ( item.hours >= HOURS_PER_DAY ) {
      printTask( item, 'finish' );
    }
    else {
      printTask( item );
    }
  }

} );

printToday();

